#!/usr/bin/env ruby

require 'pp'
require 'fileutils'
require 'tempfile'

REPLACE_STR = {'*'=>'_A_', '-'=>'_', '?'=>'_P'}

$symbols = []

def define_symbols( args )
  args.map! do |sym|
    if sym.is_a?( Array )
      sym
    else
      [sym, 'SYM_'+sym.upcase.gsub(/\*|-|\?/){|s| REPLACE_STR[s]}.gsub(/^_|_$/,'') ]
    end
  end
  $symbols = args

  args.map do |sym_id|
    sym, id = *sym_id
    "extern Value #{id};"
  end
end

def declare_symbols()
  $symbols.map do |sym_id|
    sym, id = *sym_id
    "Value #{id};"
  end
end

def register_symbols()
  $symbols.map do |sym_id|
    sym, id = *sym_id
    "#{id} = intern(\"#{sym}\");"
  end
end

########################################################
# SRC-FILTER
########################################################

def parse( str )
  str.gsub( /([ \t]*)\/\*{{(.+?)\*\/(.*?)\/\*}}\*\//m ) do |mo|
    indent = $1
    code = $2
    raise if $3.match(/\/\*{{/)
    result = eval( code )
    result = indent+result.join("\n#{indent}")+"\n"+indent if Array === result
    "#{indent}/*{{#{code}*/\n"+
      # "// THIS CODE IS AUTO-GENERATED BY src-filter\n"+
      "#{result}"+
      "/*}}*/"
  end
end


ARGV.each do |file|
  puts "converting #{file}..."
  code = open(file, "r:utf-8"){|f| f.read}
  converted_code = parse( code )
  if code != converted_code
    backup = Dir.tmpdir+"/"+file+Time.now.to_i.to_s
    puts "updating #{file} (backup to #{backup}"
    FileUtils.cp file, backup
    open(file,'w') do |f|
      f.write converted_code
    end
  end
end
